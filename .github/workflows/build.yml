name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install dependencies on Linux
      - name: Install build tools and dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl zlib1g-dev
          curl -L https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio_latest.tar.gz -o cfitsio_latest.tar.gz
          tar -xzf cfitsio_latest.tar.gz
          cd cfitsio
          ./configure --enable-sse2 --enable-reentrant --disable-shared
          make
          sudo make install
          echo "ZLIB_LIB_DIR=/usr/lib" >> $GITHUB_ENV
          echo "ZLIB_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "CFITSIO_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          echo "CFITSIO_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV

      # Install dependencies on macOS
      - name: Install build tools and dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake zlib cfitsio
          echo "ZLIB_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          echo "ZLIB_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "CFITSIO_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          echo "CFITSIO_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV

      # Install Visual Studio Build Tools on Windows
      - name: Install Visual Studio Build Tools on Windows
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $packageName = 'visualstudio2019buildtools'
          $package = choco list --local-only | Where-Object { $_ -match $packageName }
          if (-not $package) {
            choco install $packageName --includeOptional --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --quiet --norestart" -y
          } else {
            Write-Host "Visual Studio Build Tools already installed"
          }

      # Install vcpkg on Windows
      - name: Install vcpkg
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics

      # Install zlib and cfitsio via vcpkg on Windows
      - name: Install zlib and cfitsio via vcpkg
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          .\vcpkg\vcpkg.exe install zlib:x64-windows-static
          .\vcpkg\vcpkg.exe install cfitsio:x64-windows-static
          echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $GITHUB_ENV
          echo "ZLIB_LIB_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\lib" >> $GITHUB_ENV
          echo "ZLIB_INCLUDE_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\include" >> $GITHUB_ENV
          echo "CFITSIO_LIB_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\lib" >> $GITHUB_ENV
          echo "CFITSIO_INCLUDE_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\include" >> $GITHUB_ENV

      # Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install cbindgen
      - name: Install cbindgen
        run: cargo install cbindgen

      # Build the project
      - name: Build
        run: cargo build --release

      # Run tests
      - name: Run tests
        run: cargo test