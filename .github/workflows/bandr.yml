name: Release Rust Library

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Grant write permission to contents for the GITHUB_TOKEN

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install dependencies on Linux
      - name: Install build tools and dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl zlib1g-dev
          curl -L https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio_latest.tar.gz -o cfitsio_latest.tar.gz
          tar -xzf cfitsio_latest.tar.gz
          cd cfitsio_latest
          ./configure --enable-sse2 --enable-reentrant --disable-shared
          make
          sudo make install
          echo "ZLIB_LIB_DIR=/usr/lib" >> $GITHUB_ENV
          echo "ZLIB_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "CFITSIO_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          echo "CFITSIO_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV

      # Install dependencies on macOS
      - name: Install build tools and dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake zlib cfitsio
          echo "ZLIB_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          echo "ZLIB_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "CFITSIO_LIB_DIR=/usr/local/lib" >> $GITHUB_ENV
          echo "CFITSIO_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV

      # Install Visual Studio Build Tools on Windows
      - name: Install Visual Studio Build Tools on Windows
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $packageName = 'visualstudio2019buildtools'
          $package = choco list --local-only | Where-Object { $_ -match $packageName }
          if (-not $package) {
            choco install $packageName --includeOptional --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --quiet --norestart" -y
          } else {
            Write-Host "Visual Studio Build Tools already installed"
          }

      # Install vcpkg on Windows
      - name: Install vcpkg
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics

      # Install zlib and cfitsio via vcpkg on Windows
      - name: Install zlib and cfitsio via vcpkg
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          .\vcpkg\vcpkg.exe install zlib:x64-windows-static
          .\vcpkg\vcpkg.exe install cfitsio:x64-windows-static
          echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $GITHUB_ENV
          echo "ZLIB_LIB_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\lib" >> $GITHUB_ENV
          echo "ZLIB_INCLUDE_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\include" >> $GITHUB_ENV
          echo "CFITSIO_LIB_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\lib" >> $GITHUB_ENV
          echo "CFITSIO_INCLUDE_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows-static\include" >> $GITHUB_ENV

      # Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install cbindgen
      - name: Install cbindgen
        run: cargo install cbindgen

      # Build the project
      - name: Build
        run: cargo build --release

      # Run tests
      - name: Run tests
        run: cargo test

      # Generate C bindings
      - name: Generate C bindings
        run: cbindgen --config cbindgen.toml --crate ast --output target/release/ast.h

      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            target/release/ast
            target/release/ast.h
            target/release/libast.a
            target/release/libast.so
            target/release/libast.dylib
            target/release/ast.dll
            target/release/ast.lib

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Download All Artifacts from All OS Builds
      - name: Download Ubuntu Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-artifacts
          path: ./artifacts/ubuntu

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-artifacts
          path: ./artifacts/macos

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifacts
          path: ./artifacts/windows

      # Determine if pre-release
      - name: Determine if pre-release
        id: prerelease_check
        run: |
          if [[ "${GITHUB_REF##*/}" == *"-alpha"* || "${GITHUB_REF##*/}" == *"-beta"* || "${GITHUB_REF##*/}" == *"-rc"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.prerelease_check.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload Release Assets
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ./artifacts/ubuntu/ast
            ./artifacts/ubuntu/ast.h
            ./artifacts/ubuntu/libast.a
            ./artifacts/ubuntu/libast.so
            ./artifacts/ubuntu/libast.dylib
            ./artifacts/macos/ast
            ./artifacts/macos/ast.h
            ./artifacts/macos/libast.a
            ./artifacts/macos/libast.so
            ./artifacts/macos/libast.dylib
            ./artifacts/windows/ast.dll
            ./artifacts/windows/ast.lib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}